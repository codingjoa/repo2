
const p10 = p => (Math.floor(p*0.1)) * 10;
const minusToZero = p => (p<0) ? 0 : p;
function all(
  지급합계,
  공제인원,
  자식인원,
) {
  /*
    지급합계, 공제인원, 자식인원
    공제인원,자식인원=>계산공제인원

    (근로소득금액,인적공제,연금보험료연공제,특별소득공제)=>과세표준


  */
  const 계산공제인원 = (공제인원 + (자식인원*2));

  const 지급합계급여구간 = 급여구간(지급합계);
  const 연합계소득 = 지급합계급여구간 * 12; // 2 = 1 * 12
  // 근로소득
  const 근로소득공제 = three(연합계소득); // 3
  const 근로소득금액 = 연합계소득 - 근로소득공제 // 4
  // 인적공제
  const 인적공제 = 1500000 * 계산공제인원; // 5
  // 연금보험료공제
  const 상하한적용가 = (지급합계급여구간 > 4490000 ? 4490000 : (지급합계급여구간 < 290000 ? 290000 : 지급합계급여구간));
  const 연금보험료 = 상하한적용가 * 0.045; // 6 (0.045 = 4.5% = 연금보험세율)
  const 연금보험료연공제 = p10(연금보험료 * 12); // 7
  // 특별소득공제
  const 특별소득공제 = gongje(연합계소득, 계산공제인원);//eight(연합계소득, 계산공제인원); // 8
  // 과세표준 = 4 - 5 - 7 - 8 = 근로소득 - 인적공제 - 연금보험료공제 - 특별소득공제
  const 과세표준 = 근로소득금액 - 인적공제 - 연금보험료연공제 - 특별소득공제;
  const 산출세액 = nine(과세표준); // 9
  const 근로소득세액공제 = geunlo(산출세액, 연합계소득);//ten(산출세액); // 10
  const 결정세액 = 산출세액 - 근로소득세액공제 // 11
  const 간이소득세액 = p10(결정세액/12); // 12, 13
  false && console.log({
    1: 지급합계급여구간,
    2: 연합계소득,
    3: 근로소득공제,
    4: 근로소득금액,
    5: 인적공제,
    6: 연금보험료,
    7: 연금보험료연공제,
    8: 특별소득공제,
    과세표준,
    9: 산출세액,
    10: 근로소득세액공제,
    11: 결정세액,
    12: 간이소득세액
  });
  return (간이소득세액<1000) ? 0 : 간이소득세액;
}

// 월급여 급여구간 환산
function 급여구간(
  합계소득
) {
  //const x = (Math.floor(합계소득 * 0.0001)*10000)+5000;
  const level = ((합계소득 >= 3000000) ? 4 : ((합계소득 >= 1500000) ? 2 : 1));
  const b = 합계소득 % (5000 * level)
  return 합계소득 + ((2500 * level) - b);
}

// 근로소득공제액계산
function three(
  연합계소득
) {
  if(연합계소득<5000000) return 연합계소득 * 0.7;
  if(연합계소득<15000000) return 3500000 + (연합계소득-5000000)*0.4;
  if(연합계소득<45000000) return 7500000 + (연합계소득-15000000)*0.15;
  if(연합계소득<100000000) return 12000000 + (연합계소득-45000000)*0.05;
  return 14750000 + (연합계소득-100000000)*0.02;
}

// 특별소득공제계산 ()
function eight(
  연합계소득,
  공제인원
) {
  if(공제인원===1) return 3100000 + (연합계소득 * 0.04);
  else if(공제인원===2) return 3600000 + (연합계소득 * 0.04);
  else if(공제인원>=3) return 5000000 + (연합계소득 * 0.04);
  return 0;
}

// 산출세액
function nine(
  과세표준
) {
  if(과세표준<=12000000) return 과세표준 * 0.06;
  if(과세표준<=46000000) return 720000 + ((과세표준 - 12000000) * 0.15);
  if(과세표준<=88000000) return 5820000 + ((과세표준 - 46000000) * 0.24);
  if(과세표준<=150000000) return 15900000 + ((과세표준 - 88000000) * 0.35);
  if(과세표준<=300000000) return 37600000 + ((과세표준 - 150000000) * 0.38);
  if(과세표준<=500000000) return 94600000 + ((과세표준 - 300000000) * 0.40);
  return 174600000 + ((과세표준 - 500000000) * 0.42);
}

function ten(
  산출세액
) {
  return 275000 + ((산출세액 - 500000) * 0.3);
}

// alise eight
function gongje(
  total_salary,
  공제인원
) {
  let sicone, sictwo, sicthree,
    sicfour, sicfive, sicsix,
    sicseven, siceight,
    allperson = 공제인원;
  if(allperson === 1) {
    if(total_salary <= 30000000) {
      sicone = total_salary * 0.04;
      sictwo = 3100000 + sicone;
      return sictwo;
    } else if(total_salary > 30000000 && total_salary <= 45000000) {
      sicone = total_salary * 0.04;
      sictwo = 3100000 + sicone;
      sicthree = total_salary - 30000000;
      sicfour = sicthree * 0.05;
      sicfive = sictwo - sicfour;
      return sicfive;
    } else if(total_salary > 45000000 && total_salary <= 70000000) {
      sicone = total_salary * 0.015;
      sictwo = 3100000 + sicone;
      return sictwo;
    } else if(total_salary > 70000000 && total_salary <= 120000000){
      sicone = total_salary * 0.005;
      sictwo = 3100000 + sicone;
      return sictwo;
    } else {
      //1명 공식 끝
    }
  } else if(allperson === 2) {
    if(total_salary <= 30000000) {
      sicone = total_salary * 0.04;
      sictwo = 3600000 + sicone;
      return sictwo;
    } else if(total_salary <= 45000000) {
      sicone = total_salary * 0.04;
      sictwo = 3600000 + sicone;
      sicthree = total_salary - 30000000;
      sicfour = sicthree * 0.05;
      sicfive = sictwo - sicfour;
      return sicfive;
    } else if(total_salary <= 70000000) {
      sicone = total_salary * 0.02;
      sictwo = 3600000 + sicone;
      return sictwo;
    } else if(total_salary <= 120000000) {
      sicone = total_salary * 0.01;
      sictwo = 3600000 + sicone;
      return sictwo;
    } else {
      //2명 공식 끝
    }
  } else if(allperson >= 3) {
    if(total_salary <= 30000000) {
      sicone = total_salary * 0.07;
      sictwo = 5000000 + sicone;
      return sictwo;
    } else if(total_salary <= 45000000) {
      sicone = total_salary * 0.07;
      sictwo = 5000000 + sicone;
      sicthree = total_salary - 30000000;
      sicfour = sicthree * 0.05;
      sicfive = sictwo - sicfour;
      sicsix = total_salary - 40000000;
      sicseven = minusToZero(sicsix) * 0.05;
      siceight = sicfive - sicseven;
      return siceight;
    } else if(total_salary <= 70000000) {
      sicone = total_salary * 0.05;
      sictwo = 5000000 + sicone;
      sicthree = total_salary - 40000000;
      sicfour = sicthree * 0.04;
      sicfive = sictwo + sicfour;
      return sicfive;
    } else if(total_salary <= 120000000) {
      // 5,000,000 + (84,120,000 × 0.03) + [(84,120,000 - 40,000,000 )× 4%] = 7,730,800
      sicone = total_salary * 0.03;
      sictwo = 5000000 + sicone;
      sicthree = total_salary - 40000000;
      sicfour = sicthree * 0.04;
      sicfive = sictwo + sicfour;
      return sicfive;
    } else {
      //3명 공식 끝
    }
  }
}

/* @ky
   10번에 대한 설명
   아래는 공식 입니다.
   275,000원 + [(산출세액 - 500,000) × 0.3]
*/
//alise ten
function geunlo(
  산출세액,
  연합계소득
) {
  let first = null;
  if(산출세액 <= 500000) {
    first = 산출세액 * 0.55;
  }
  else {
   first = 275000 + (산출세액 - 500000) * 0.3;
 }
 first = minusToZero(first);
  if(first >= 660000) { // 66만원 이상일 때
    if(연합계소득 <= 55000000) {
      return 660000;
    } else if (연합계소득 <= 70000000) {
      return 630000;
    } else {
      return 500000;
    }
  } else {
    return first;
  }
}
module.id == require.main.id && (() => {
/* @ky
   산출세액이 1,633,170원 이라고 칩니다.
   275,000 + [(1,633,170 - 500,000) × 30%] = 614,950
   이 식은 근로소득세액공제의 값이 614,950원 한도를 넘지 않습니다. 함수는 같아서 값만 변경해줬습니다.
   산출세액이  3,191,520 원 이라고 칩니다.
   275,000 + [(3,191,520 - 500,000) × 30%] = 614,950
*/
//console.log(gongje(2, 48120000, 2));
  console.log(geunlo(1633170,36120000));
  console.log(geunlo(3191520,48120000));
  console.log(all(3010000, 1, 0));
  console.log(all(2005000, 1, 0));
  console.log(all(4010000, 1, 0));
})();
module.exports = {
  all, 급여구간
};
